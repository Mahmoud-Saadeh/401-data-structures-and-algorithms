/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stackAndQueue;

import org.junit.Test;

import static org.junit.Assert.*;

public class AppTest {
  @Test
  public void pushOneStack() {
    Stack<java.io.Serializable> stack = new Stack<>();

    stack.push(3);

    assertEquals("pushOneStack should return TOP -> { 3 } -> NULL", "TOP -> { 3 } -> NULL", stack.toString());
  }

  @Test
  public void pushMultiStack() {
    Stack<java.io.Serializable> stack = new Stack<>();

    stack.push(3);
    stack.push(2);
    stack.push(4);

    assertEquals("pushMultiStack should return TOP -> { 4 } -> { 2 } -> { 3 } -> NULL", "TOP -> { 4 } -> { 2 } -> { 3 } -> NULL", stack.toString());
  }

  @Test
  public void popOneStack() {
    Stack<java.io.Serializable> stack = new Stack<>();

    stack.push(3);
    stack.push(2);
    stack.push(4);

    stack.pop();

    assertEquals("popOneStack should return TOP -> { 2 } -> { 3 } -> NULL", "TOP -> { 2 } -> { 3 } -> NULL", stack.toString());
    assertEquals("popOneStack should return 2", "2", stack.pop());
  }

  @Test
  public void popMultiStack() {
    Stack<java.io.Serializable> stack = new Stack<>();

    stack.push(3);
    stack.push(2);
    stack.push(4);

    stack.pop();
    stack.pop();
    stack.pop();

    assertEquals("popMultiStack should return TOP -> NULL", "TOP -> NULL", stack.toString());
  }

  @Test
  public void peekStack() {
    Stack<java.io.Serializable> stack = new Stack<>();

    stack.push(3);
    stack.push(2);
    stack.push(4);

    assertEquals("peekStack should return 4", "4", stack.peek());
  }

  @Test
  public void peekPopEmptyStack() {
    Stack<java.io.Serializable> stack = new Stack<>();

    assertEquals("peekPopEmptyStack should return The Stack is empty", "The Stack is empty", stack.pop());
    assertEquals("peekPopEmptyStack should return The Stack is empty", "The Stack is empty", stack.peek());
  }
  //////////////////////////////////

  @Test
  public void enqueueOneQueue() {
    Queue<java.io.Serializable> queue = new Queue<>();

    queue.enqueue(8);

    assertEquals("enqueueOneQueue should return front -> { 8 } <- rear", "front -> { 8 } <- rear", queue.toString());
  }

  @Test
  public void enqueueMultiQueue() {
    Queue<java.io.Serializable> queue = new Queue<>();

    queue.enqueue(8);
    queue.enqueue(4);
    queue.enqueue(7);

    assertEquals("enqueueMultiQueue should return front -> { 8 } -> { 4 } -> { 7 } <- rear", "front -> { 8 } -> { 4 } -> { 7 } <- rear", queue.toString());
  }

  @Test
  public void dequeueOneQueue() {
    Queue<java.io.Serializable> queue = new Queue<>();

    queue.enqueue(8);
    queue.enqueue(4);
    queue.enqueue(7);

    queue.dequeue();

    assertEquals("dequeueOneQueue should return front -> { 4 } -> { 7 } <- rear", "front -> { 4 } -> { 7 } <- rear", queue.toString());
    assertEquals("dequeueOneQueue should return 4", "4", queue.dequeue());
  }

  @Test
  public void dequeueMultiQueue() {
    Queue<java.io.Serializable> queue = new Queue<>();

    queue.enqueue(3);
    queue.enqueue(2);
    queue.enqueue(4);

    queue.dequeue();
    queue.dequeue();
    queue.dequeue();

    assertEquals("dequeueMultiQueue should return front -> rear", "front -> rear", queue.toString());
  }

  @Test
  public void peekQueue() {
    Queue<java.io.Serializable> queue = new Queue<>();

    queue.enqueue(3);
    queue.enqueue(2);
    queue.enqueue(4);

    assertEquals("peekStack should return 3", "3", queue.peek());
  }

  @Test
  public void peekDequeueEmptyQueue() {
    Queue<java.io.Serializable> queue = new Queue<>();

    assertEquals("peekPopEmptyStack should return The Queue is empty", "The Queue is empty", queue.dequeue());
    assertEquals("peekPopEmptyStack should return The Queue is empty", "The Queue is empty", queue.peek());
  }
}
